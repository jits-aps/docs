


TFloatField



 
  
    
      &lt;&lt; Click to Display Table of Contents &gt;&gt;
      Navigation:&nbsp;
      
      Design Units &gt; Table Designer&nbsp;&gt;
   
      TFloatField

    
    
      
      
      
      
      
    
    


  


 



&nbsp;
Description
TFloatField represents a field that contains floating-point values in a dataset.
&nbsp;
TFloatField encapsulates the fundamental behavior common to numeric data. Floating-point fields can hold values in the range from (positive or negative) 5.0 * 10^-324 to 1.7 * 10^308 with an accuracy of 15 digits. TFloatField introduces new properties to convert between integer values and other data types, to control the precision of numbers that the field will permit, and to format the value for display purposes.
&nbsp;
If you use the Table Designer at design time to create a persistent field component for the float field, you can access it by name at runtime. When using dynamic field components, you can access the TFloatField instance using the dataset's Fields property or FieldByName method.
&nbsp;
Object Hierarchy
TFloatField - TField - TComponent - TPersistent - TObject
&nbsp;
Properties of TField
&nbsp;


Name

Description



Alignment
Run-time only

Use Alignment to specify the position of the field's data within data-aware controls. These are the possible values:
&nbsp;


Value

Meaning



taLeftJustify

Align data to the left side of the control



taCenter

Center data horizontally in the control



taRightJustify

Align data to the right side of the control







AsBoolean
Run-time only

Represents the field's value as a boolean value.



AsDateTime
Run-time only

Represents the field's value as a TDateTime value.



AsFloat
Run-time only

Represents the field's value as a double value.



AsInteger
Run-time only

Represents the field's value as a 32-bit integer.



AsString
Run-time only

Represents the field's value as a string.



AsVariant
Run-time only

Represents the Value of the field as a Variant.



Currency

Determines whether the value in the field should be formatted as a currency value.



CurValue
Run-time only

Represents the current value of the field (as a Variant) in a Validate event
Read the CurValue property to retrieve the value of the field that is currently assigned.
&nbsp;
Note! This property is only supported in a validate event.



DataType
Run-time only

Identifies the TFieldType of the field component.



DefaultValue

Use the DefaultValue property to access or define the default value for the field definition. The expression used
for the default value must be a simple literal constant or one of the following default SQL parameters:
CURRENT_ACCID
CURRENT_ACCNAME
CURRENT_DATABASE
CURRENT_DATE
CURRENT_STOCKID
CURRENT_TIME
CURRENT_TIMESTAMP
CURRENT_USERNAME



DisplayFormat

Determines how a numeric field's value is formatted for display in a data-aware control. Use the DisplayFormat property to override automatic formatting of a field.
Note: DisplayFormat affects only the display of the field's data. It does not affect the validity of strings assigned to a numeric field using the AsString property.
&nbsp;
The value of DisplayFormat is a string that encodes the formatting of numeric data using the specifiers in the following table:
&nbsp;


Specifier

Description



0

Digit placeholder. If the value being formatted has a digit in the position where the &quot;0&quot; appears in the format string, then that digit is copied to the output string. Otherwise, a &quot;0&quot; is stored in that position in the output string.



#

Digit placeholder. If the value being formatted has a digit in the position where the &quot;#&quot; appears in the format string, then that digit is copied to the output string. Otherwise, nothing is stored in that position in the output string.



.

Decimal point. The first &quot;.&quot; character in the format string determines the location of the decimal separator in the formatted value; any additional &quot;.&quot; characters are ignored. The actual character used as a the decimal separator in the output string is determined by the DecimalSeparator global variable. The default value of DecimalSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.



,

Thousand separator. If the format string contains one or more &quot;,&quot; characters, the output will have thousand separators inserted between each group of three digits to the left of the decimal point. The placement and number of &quot;,&quot; characters in the format string does not affect the output, except to indicate that thousand separators are wanted. The actual character used as a the thousand separator in the output is determined by the ThousandSeparator global variable. The default value of ThousandSeparator is specified in the Number Format of the Regional Settings section in the Windows Control Panel.



E+

Scientific notation. If any of the strings &quot;E+&quot;, &quot;E-&quot;, &quot;e+&quot;, or &quot;e-&quot; are contained in the format string, the number is formatted using scientific notation. A group of up to four &quot;0&quot; characters can immediately follow the &quot;E+&quot;, &quot;E-&quot;, &quot;e+&quot;, or &quot;e-&quot; to determine the minimum number of digits in the exponent. The &quot;E+&quot; and &quot;e+&quot; formats cause a plus sign to be output for positive exponents and a minus sign to be output for negative exponents. The &quot;E-&quot; and &quot;e-&quot; formats output a sign character only for negative exponents.



'xx'/&quot;xx&quot;

Characters enclosed in single or double quotes are output as-is, and do not affect formatting.



;

Separates sections for positive, negative, and zero numbers in the format string.




&nbsp;
The locations of the leftmost &quot;0&quot; before the decimal point in the format string and the rightmost &quot;0&quot; after the decimal point in the format string determine the range of digits that are always present in the output string.
&nbsp;
The number being formatted is always rounded to as many decimal places as there are digit placeholders (&quot;0&quot; or &quot;#&quot;) to the right of the decimal point. If the format string contains no decimal point, the value being formatted is rounded to the nearest whole number.
&nbsp;
If the number being formatted has more digits to the left of the decimal separator than there are digit placeholders to the left of the &quot;.&quot; character in the format string, the extra digits are output before the first digit placeholder.



DisplayLabel

Contains the text to display as Field Name in a data-aware controls.



DisplayText
Run-time only

Represents the field's value as it is displayed in a data-aware control.



DisplayWidth

Specifies the number of characters that should be used to calculate the column width for the field when it is displayed by TGrid.



FieldName

Indicates the name of the physical column in the underlying table or query result to which a field component is bound.



Index
Run-time only

Indicates the field component's index in the Fields property of the dataset.



IsNull
Run-time only

Indicates whether the field has a value assigned to it.



MaxValue
MinValue

Limits the maximum and minimum value in the in the floating-point field.



Name

Specifies the name of the component as referenced in code.



OldValue

Represents the posted value of the field (as a Variant)
Read the OldValue property to retrieve the value of the field that was obtained from the dataset before any edits were posted.



Origin

The Origin property distinguishes the name of the field as it appears in its dataset from the name of the field in the base table on which it is based. For example, in a query that uses the following SQL statement, the value of Origin is CUSTOMERS.NO.
&nbsp;
SELECT NO AS &quot;ID&quot; FROM CUSTOMERS



Precision

Use Precision to set the number of digits beyond the decimal point that the value should be formatted to before rounding begins. Precision affects the format of the floating-point value when it is displayed as a text string, not the actual floating-point value that is stored in the field. The default value of Precision is 15 decimal places.
&nbsp;
Note! Precision must be greater than or equal to 2. Trying to set Precision to a value less than 2 changes the value of Precision to 2.



ReadOnly

Determines whether the field can be modified.



Required

Specifies whether a nonblank value for a field is required.



TableRelation

Use this property to define relationships (links) to other tables. For instance, if you want to provide a lookup into another table. This property contents following sub properties:
&nbsp;


Name

Description



IndexFieldName

Specifies the Field Name from the related table, the field has to be linked to. The field must be an indexed field that contain in the index specified by the TableIndex property.



TableIndex

Specified the Index Name from the related table.
If no index is specified the primary index will be used.



TableName

Specified the Table Name the field has to be linked to.



TableRange

If the field name, specified by the IndexFieldName property, is not the first field in the index, specified by the TableIndex property, you must define a range for the previous fields in the current index. At design time, use the Table Range Editor by clicking on the assistant button in the Object Inspector.







Tag

Stores an integer value as part of a component.
This property is provided for the convenience of developers and has no predefined meaning.



Text
Run-time only

Contains the string to display in a data-aware control when the field is in edit mode.



ValidateRelation

Specifies whether or not the system should validate the users entry based on the information already in the table set up through the TableRelation property.



Validating
Run-time only

Specifies whether the field is in validate mode.
The field is in validate mode, when the OnValidate event is executed.



Value

Represents the data in a field component. Use Value to read data directly from and write data directly to a field component at runtime. For example, use the Value property to affect the contents of a field that is not Visible.



Visible

Determines whether the field appears in TGrid control.




&nbsp;
Methods of TField
&nbsp;


Name

Description



Assign

Copies the Value property from another field component.



Clear

Sets the value of the field to NULL.



FindRelation

Call this method to search for a record in the related TDataSet, specified by the TableRelation property, who containing the specified field values. If the search is successful, FindRelation positions the cursor on the matching record and returns true. Otherwise the cursor is not moved, and FindKey returns false.



FocusControl

Forces a form's focus to the first data-aware component associated with the field object.



Relation

Use the Relation method to get the related TDataSet when a field has a relation to another table, specified by the TableRelation property.
&nbsp;
Example:
&nbsp;
procedure ZipCodeValidate(Sender: TField);
begin
 &nbsp; if (not Sender.IsNull) and (Sender.FindRelation) then
 &nbsp; &nbsp; City.AsString := Sender.Relation.FieldByName('City').AsString;
end;




&nbsp;
Events of TField
&nbsp;


Name

Description



OnChange

Occurs immediately after the data in the field is written to the record buffer.



OnGetText

Occurs when the DisplayText or Text properties of the field are referenced.
&nbsp;
Write an OnGetText handler to perform custom processing for the DisplayText and Text properties. Use OnGetText to format the Value of the field differently when it must be edited from the format used when simply displaying the value, or use OnGetText to display something other than the field's value when it is displayed.
&nbsp;
If there is no OnGetText handler, the value of the DisplayText and Text properties is simply the value of the AsString property.



OnSetText

Occurs when the Text property is assigned a value.
&nbsp;
Write an OnSetText event handler to specify processing that occurs whenever Text receives a new value. If there is an OnGetText event handler that formats the Value of the field in some special way for editing purposes, OnSetText should reverse the process when parsing the edited string.
&nbsp;
If there is no OnSetText handler, the Text property is set by setting the AsString property.



OnValidate

Occurs just before the data is written to the record buffer.
&nbsp;
Write an OnValidate event handler to validate changes made to the data in the field, just before the data is written to the current record buffer. To reject the current value of the field from the OnValidate event handler, raise an exception by calling the ErrorMsg procedure.








